<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/home/daniel/master/baltasar/db/baltasar.db" readonly="0" foreign_keys="0" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="0" synchronous="1"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="200"/><column_width id="3" width="8537"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><current_table name="Address"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">SELECT * FROM Transfer i
WHERE 
	i.`to` in (SELECT o.`from` FROM Transfer o WHERE 
		o.`from` = i.`to` and
		o.token = i.token and
		i.blocknumber &lt; o.blocknumber and
		i.blocknumber + 5 &gt; o.blocknumber
	LIMIT 1
	)
LIMIT 100</sql><sql name="SQL 1">DROP TABLE IF EXISTS balanceChanges;
CREATE TEMP TABLE balanceChanges AS
	SELECT 
		t.`from`, t.`to`, t.token, t.blocknumber, t.amountInTokens as transferedBalance, bal.balance - t.amountInTokens as newSenderBalance, bal.hops
	FROM
		(SELECT t.token, min(t.blocknumber) as nextBlock FROM 
			(SELECT token, address, max(blocknumber) as blocknumber FROM tokenBalance GROUP BY token, address) b
			INNER JOIN
			Transfer t
			ON t.blocknumber &gt; b.blocknumber and b.token = t.token and b.address = t.`from`
		GROUP BY t.token) n
		INNER JOIN
		Transfer t
		INNER JOIN
		tokenBalance bal
		ON 
			t.token = n.token and 
			t.blocknumber = n.nextBlock and 
			bal.token = t.token and 
			bal.address = t.`from` and
			t.amountInTokens &gt; 0 and
            not t.`from` = t.`to`;

INSERT INTO tokenBalance
SELECT
	b.address, 
	b.blocknumber, 
	b.token, 
	b.transferedBalance + IFNULL(t.balance, 0) as balance, 
	CASE
		WHEN t.hops is null THEN b.hops
		WHEN b.hops is null THEN t.hops
		ELSE ((b.hops * b.transferedBalance) + (t.hops * t.balance)) / (b.transferedBalance + t.balance) END hops
FROM
	(SELECT address, blocknumber, token, SUM(transferedBalance) as transferedBalance, SUM(hops * outgoingBalance) / SUM(outgoingBalance) as hops
	FROM
		(SELECT 
			b.`to` as address, 
			b.blocknumber, 
			b.token, 
			b.transferedBalance,
			(b.hops + 1) as hops,
			b.transferedBalance as outgoingBalance
		FROM 
			balanceChanges b
		UNION ALL
		SELECT 
			b.`from` as address, 
			b.blocknumber, 
			b.token, 
			- b.transferedBalance,
			0,
			0
		FROM 
			balanceChanges b) b
	GROUP BY address, blocknumber, token) b
	LEFT OUTER JOIN 
		tokenBalance t
	ON 
		b.token = t.token and 
		b.address = t.address and 
		t.blocknumber = (SELECT max(blocknumber) FROM tokenBalance t_past WHERE t_past.token = t.token and t_past.address = t.address);
    </sql><current_tab id="1"/></tab_sql></sqlb_project>
